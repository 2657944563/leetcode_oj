// 开始时间：2023-10-14 11:51:44
// 题目标题：可以被一步捕获的棋子数
// 题目标记：available-captures-for-rook
// 题目编号：999
// 题目描述：

/**
 * 在一个 8 x 8 的棋盘上，有一个白色的车（Rook），用字符 'R' 表示。棋盘上还可能存在空方块，白色的象（Bishop）以及黑色的卒（pawn），分别用
 * 字符 '.'，'B' 和 'p' 表示。不难看出，大写字符表示的是白棋，小写字符表示的是黑棋。
 * <p>
 * 车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其一，然后一直向选定的方向移动，直到满足下列四个条件之一：
 * <p>
 * <p>
 * 棋手选择主动停下来。
 * 棋子因到达棋盘的边缘而停下。
 * 棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。
 * 车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。
 * <p>
 * <p>
 * 你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋子数）。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * <p>
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".
 * ",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".
 * ",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".",".
 * "],[".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 在本例中，车能够捕获所有的卒。
 * <p>
 * <p>
 * 示例 2：
 * <p>
 * <p>
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".",
 * "p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B",
 * "p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".",".
 * "],[".",".",".",".",".",".",".","."]]
 * 输出：0
 * 解释：
 * 象阻止了车捕获任何卒。
 * <p>
 * <p>
 * 示例 3：
 * <p>
 * <p>
 * <p>
 * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".
 * ",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".
 * ",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".",".
 * "],[".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 车可以捕获位置 b5，d6 和 f5 的卒。
 * <p>
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * <p>
 * board.length == board[i].length == 8
 * board[i][j] 可以是 'R'，'.'，'B' 或 'p'
 * 只有一个格子上存在 board[i][j] == 'R'
 * <p>
 * <p>
 * Related Topics 数组 矩阵 模拟 👍 113 👎 0
 */
//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int numRookCaptures(char[][] board) {
        int x = 0, y = 0, sum = 0;
        for (int i = 0; i < board.length; i++) {
            for (int l = 0; l < board[i].length; l++) {
                if (board[i][l] == 'R') {
                    x = i;
                    y = l;
                }
            }
        }
        int tempX = x, tempY = y;
        while (tempX > 0) {
            tempX--;
            if (board[tempX][y] == 'B') {
                break;
            } else if (board[tempX][y] == 'p') {
                sum++;
                break;
            }
        }
        tempX = x;
        while (tempX < board.length) {
            if (board[tempX][y] == 'B') {
                break;
            } else if (board[tempX][y] == 'p') {
                sum++;
                break;
            }
            tempX++;
        }
        while (tempY < board.length) {
            if (board[x][tempY] == 'B') {
                break;
            } else if (board[x][tempY] == 'p') {
                sum++;
                break;
            }
            tempY++;
        }
        tempY = y;
        while (tempY > 0) {
            tempY--;
            if (board[x][tempY] == 'B') {
                break;
            } else if (board[x][tempY] == 'p') {
                sum++;
                break;
            }
        }
        return sum;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

