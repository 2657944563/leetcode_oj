### 解题思路

题目要求对一个矩阵，按照从外向内顺时针打印每个数字。

通过题目描述，结合平时操作数组的经验，就知道这是一道不好解决的问题。

**因为其对二维数组的操作不是单向的。**

我们进一步观察他的输入输出。

对于matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]，我们观察他的输出。

**发现这个顺时针的打印，就像剥洋葱一样，一个边一个边的进行，一层一层向内。**

更进一步，我们可以将输出，按照四个边，进行解释：

对于第一层， row = 0: 1,2,3,4; column = 3: 8,12,16; row = 3: 15,14,13; column = 0: 9, 5

对于第二层, row = 1: 6,7; column = 2: 11; row = 2: 10;

**我们发现，在顺序打印时，打印的过程在每层都分为4个状态**

**状态1**： 从初**始开始/或从状态4**结束的行开始，**保持行不变**，从左到右（**列数递增**）打印**本行**元素

**状态2**： 从**状态1**结束的列开始，**保持列不变**，从上到下（**行数递增**）打印**本列**元素

**状态3**: 从**状态2**结束的行开始，**保持行不变**，从右到左（**列数递减**）打印**本行**元素

**状态4**： 从**状态3**结束的列开始，**保持列不变**，从下到上（**行数递减**）打印**本列**元素

综上，整个打印过程分为这4种状态，也就是说，程序在任意时刻的运行中，必须处于这四种状态之一

由此我们可以通过while(true) 中套switch 的标准形式，实现这个具有4个状态的状态机。

**整个过程就是一个从外到内，一层一层剥洋葱的过程，剥每层时，需要四个步骤（四个状态）。**

**思路讲完了，在实现过程中，要注意行列的约束，以及跳出循环的条件。**

具体的细节参看下面完整代码👇👇👇！

### 代码

* cpp

```cpp
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if(matrix.size() == 0) //干掉特殊情况
            return {};
        
        vector<int> res;
        int i = 0, j = 0; //i,j分别表示当前的行 和 列
        int row = matrix.size(), column = matrix[0].size(); // row作为状态2的约束，column作为状态1的约束
        int row_left = 0, column_left = -1; //row_left 作为状态4的约束，column_left作为状态3的约束
        int state = 1; //初始状态为状态1，本程序是从状态1开始，其实具体来说，从任何状态开始均可

        while(true) //状态机开整
        {
            switch(state) //当前啥状态啊？
            {
                case 1: //状态1
                    while(j < column) //固定行数，列数递增打印本行的每个数字
                    {
                        res.push_back(matrix[i][j]);
                        ++j;
                    }
                    --j; //退出循环时j == column 这超出范围了，所以回退
                    ++i; //同时向下走一个，作为状态2的初始
                    --column; //剥洋葱，外边那层皮剥掉了，所以-1，也就是说当再一次到达状态1时，外层不需要打印了，打印内层。
                    state = 2; //转移到状态2
                    break;
                case 2: //状态2
                    while(i < row) //固定列数，行数递增打印本列的每个数字
                    {
                        res.push_back(matrix[i][j]);
                        ++i;
                    }
                    --i; //退出循环时 i == row，超出范围，回退
                    --j;
                    --row; //继续剥洋葱
                    state = 3; //转移到状态3
                    break;
                case 3: //状态3
                    while(j > column_left) //固定行数，列数递减打印本行的每个元素
                    {
                        res.push_back(matrix[i][j]);
                        --j;
                    }
                    ++j; //结束时j == column_left，超出范围，递增一个
                    --i;
                    ++column_left; //仍然剥洋葱
                    state = 4; //转移到状态4
                    break;
                case 4: //状态4
                    while(i > row_left) //固定列数，行数递减打印本列的每个元素
                    {
                        res.push_back(matrix[i][j]);
                        --i;
                    }
                    ++i; //退出循环时 i == row_left，超出范围，回退
                    ++j;
                    ++row_left; // 剥完这个状态，最外边一圈的元素就都完成了打印
                    state = 1; //转移到状态1 ，继续剥洋葱
                    break;
                default: //写的完整，其实default也没啥用
                    return {};
            }

            //退出状态机的条件
            //退出状态机也是有4种情况
            //即分别从状态1,2,3,4退出（执行完当前状态，洋葱剥完了）
            if((state == 2||state == 4) && column_left >= column)
                break;
            if((state == 1||state == 3) && row_left >= row)
                break;
        }

        return res;

    }
};
```

