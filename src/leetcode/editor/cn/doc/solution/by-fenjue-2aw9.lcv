题目要求正常字符串s跟正则字符串p进行匹配,想到字符串匹配脑子里一定要最快在脑子里蹦出二维动态规划

# 1.转移方程

dp[i][j]表示s.substr(0,i)与p.substr(0,j)是匹配的。
这个需要分类讨论：

* 

```
当p[j-1]!='*'时,
如果s[i-1]==p[j-1],那么dp[i][j]=dp[i-1][j-1]
否则不匹配，dp[i][j]=0

当p[j-1]='*'时，情况会复杂一些
如果考虑忽略p[j-2]的话，那么看s.substr(0,i)与p.substr(0,j-2)是否匹配的，即dp[i][j]=dp[i][j-2]

如果p[j-2]==s[i-1]的话，那么可以套娃了，继续看看s.substr(0,i-1)与p.substr(0,j)是否匹配的。
这一点也是最难想的，我等菜鸡不看题解根本想不出来。
这时候dp[i][j]=dp[i][j]||dp[i-1][j]


```

千言万语不如打个表来的直观
![image.png](https://pic.leetcode-cn.com/1653549504-VQjtzn-image.png)

# 2.初始化条件

当s和p都为空串时都匹配，即dp[0][0]=1

**(1)判断非空串s和空串p的匹配**
显然，这必然不可能匹配，即这一列从i=1开始全为0

**2)判断空串s与非空串p的匹配**
这种情况只有p带'*'时才有可能匹配

# 3.最后代码

* 

```
class Solution {
public:
    bool isMatch(string s, string p) {
        auto matches = [&](int i, int j)->bool {
            if (p[j - 1] == '.') {
                return 1;
            }
            return s[i - 1] == p[j - 1];
        };
        
        int m = s.size();
        int n = p.size(); 

        bool dp[20][30]{0};  

        //边界条件 
        dp[0][0]=1;
        for(int i=2;i<=n;++i)if(p[i-1]=='*')dp[0][i]=dp[0][i-2];

        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (p[j - 1] != '*') {
                    if (matches(i, j)) dp[i][j] = dp[i - 1][j - 1];
                }
                else {
                    dp[i][j] = dp[i][j - 2];
                    if (matches(i, j - 1)) dp[i][j] = dp[i][j] ||  dp[i - 1][j];
                }
            }
        }
        return dp[m][n];
    }
};

```

钻了题的空子，估摸着s和p的长度不会超过30，因此将动态规划数组改了改省了点内存。
![image.png](https://pic.leetcode-cn.com/1653549026-oTeNCZ-image.png)
