### 解题思路

![image.png](https://pic.leetcode-cn.com/1646627827-jItKXM-image.png)

#### 排除所有错误情况

逻辑上没怎么考算法，所以算法方面没难度，难点在于归纳各种正确的情况

1. `.` 出现正确情况：只出现一次（即前面没出现过），且出现在 e 或 E 的前面

   + 因为如果前面出现过 e/E 再出现. 说明 e/E 后面跟着小数，不符合题意
2. `e` 或 `E` 出现正确情况：只出现一次（即前面没出现过），且出现前有数字，出现后后面也得有数字

3. `+`、`-` 出现正确情况：只能在**开头** 和 e 或 E 的后一位

#### 解题精髓

+ 返回值：通过判断 numFlag 是否为 true 来判断字符串符不符合
  + 首先通过不断遍历过程中，如果有不符合上面三点情况的话，直接会返回 false
  + 如果遍历完还没发现代码有什么问题，不能掉以轻心，因为此时来到了最后一个特殊情况，即 123e 或 123E
    + 因为 e/E 后面必须还得有数字，所以可以在遍历过程中看 **e/E 后面是否直接跟着数字** 或 **出现正负号后还有没有跟着数字**，比较繁琐
    + 因此我直接选择判断 numFlag 是否等于 true，来判断 e/E 后面还有没有出现过数字
    + 方法：在出现 e/E 后，将 numFlag 变为 false，如果后面有数字那就自然而然 numFlag 又变为 true

**如还有不懂，可结合代码中注释进行食用**
<br />

### 代码

* javascript

```javascript
/**
 * @param {string} s
 * @return {boolean}
 */
var isNumber = function(s) {
    let i, len, numFlag = false, dotFlag = false, eFlag = false;
    s = s.trim(); // 去掉首尾空格
    len = s.length; // 去掉后再重新计算长度
    for(i = 0; i < len; i++) {
        // 如果是数字，那么直接将 numFlag 变为 true 即可
        if(s[i] >= '0' && s[i] <= '9') {
            numFlag = true;
        } else if(s[i] === '.' && !dotFlag && !eFlag) {
            // 如果是 .  那必须前面还出现过 .  且前面没出现过 e/E，因为如果前面出现过 e/E 再出现. 说明 e/E 后面跟着小数，不符合题意
            dotFlag = true;
        } else if((s[i] === 'e' || s[i] === 'E') && !eFlag && numFlag) {
            // 如果是 e 或 E，那必须前面没出现过 e/E，且前面出现过数字
            eFlag = true;
            numFlag = false; // 这一步很重要，将是否出现过数字的 Flag 置为 false，防止出现 123E 这种情况，即出现 e/E 后，后面没数字了
        } else if((s[i] === '+' || s[i] === '-') && (i === 0 || (s[i - 1] === 'e' || s[i - 1] === 'E'))) {
            // 如果是 +/- 那必须是在第一位，或是在 e/E 的后面
        } else {
            // 上面情况都不满足，直接返回 false 即可，提前剪枝
            return false;
        }
    }
    return numFlag;
};
```

