## 模拟

由于最终是要我们对 `Z` 型矩阵进行从上往下、从左往右的构建输出。

因此可以构建一个矩阵 `g` 存储 `Z` 型中的每行字符（忽略 `Z` 中的空格间隙），同时使用 `idxs` 存储 `Z` 型中每行用到的下标。

目标 `Z` 型 和 矩阵 `g` 以及 `idxs` 三者关系：

* 

```
P     I    N             PIN                3
A   L S  I G    =>       ALSIG     =>       5
Y A   H R                YAHR               4
P     I                  PI                 2   
```

代码：

* []

```Java
class Solution {
    static int N = 1010;
    static char[][] g = new char[N][N];
    static int[] idxs = new int[N];
    public String convert(String s, int m) {
        if (m == 1) return s;
        int n = s.length();
        Arrays.fill(idxs, 0);
        for (int i = 0, j = 0, k = 1; i < n; i++) {
            g[j][idxs[j]++] = s.charAt(i);
            j += k;
            if (j < 0) {
                j += 2; k = 1;
            } else if (j == m) {
                j -= 2; k = -1;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < idxs[i]; j++) {
                sb.append(g[i][j]);
            }
        }
        return sb.toString();
    }
}
```

* 时间复杂度：创建数组的工作只会发生一次，清空 `idxs` 数组操作会发生在每个样例中，复杂度为 $O(m)$；将 `s` 的每个字符填入矩阵的复杂度为 $O(n)$；从矩阵中取出字符构建答案复杂度为 $O(n)$。整体复杂度为 $O(m + n)$
* 空间复杂度：$O(n * m)$

---

## 数学规律

对于本题，我们可以不失一般性的将规律推导为「首项」和「公差公式」。

这通常能够有效减少一些判断。

分情况讨论：

* 对于第一行和最后一行：公差为 `2 * (n − 1)` 的等差数列，首项是 `i`
* 对于其他行：两个公差为 `2 * (n − 1)` 的等差数列交替排列，首项分别是 `i` 和 `2 * n − i − 2`

代码：

* []

```Java
class Solution {
    public String convert(String s, int r) {
        int n = s.length();
        if (n == 1 || r == 1) return s;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < r; i++) {
            if (i == 0 || i == r - 1) {
                int pos = i, offset = 2 * (r - 1);
                while (pos < n) {
                    sb.append(s.charAt(pos));
                    pos += offset;
                }
            } else {
                int pos1 = i, pos2 = 2 * r - i - 2;
                int offset = 2 * (r - 1);
                while (pos1 < n || pos2 < n) {
                    if (pos1 < n) {
                        sb.append(s.charAt(pos1));
                        pos1 += offset;
                    }
                    if (pos2 < n) {
                        sb.append(s.charAt(pos2));
                        pos2 += offset;
                    }
                }
            }
        }
        return sb.toString();
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
